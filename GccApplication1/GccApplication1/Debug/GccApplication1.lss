
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000002ea  0000037e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800110  00800110  0000038e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000038e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000aea  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000924  00000000  00000000  00000f4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004a3  00000000  00000000  00001872  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000fc  00000000  00000000  00001d18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f7  00000000  00000000  00001e14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001d1  00000000  00000000  0000230b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000024dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	9d c0       	rjmp	.+314    	; 0x16c <__vector_12>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ee       	ldi	r30, 0xEA	; 234
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 31       	cpi	r26, 0x18	; 24
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	e1 d0       	rcall	.+450    	; 0x286 <main>
  c4:	10 c1       	rjmp	.+544    	; 0x2e6 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <adcInit>:
	0b0000000000000000
};

void adcInit( void )
{
	ADMUX = 0b01100001;
  c8:	81 e6       	ldi	r24, 0x61	; 97
  ca:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0b10000110;
  cc:	86 e8       	ldi	r24, 0x86	; 134
  ce:	86 b9       	out	0x06, r24	; 6
  d0:	08 95       	ret

000000d2 <changeADCChannel>:
}

void changeADCChannel(int channel){
	ADMUX = 0x60 | channel;
  d2:	80 66       	ori	r24, 0x60	; 96
  d4:	87 b9       	out	0x07, r24	; 7
  d6:	08 95       	ret

000000d8 <readADC>:
}

int readADC(){
	ADCSRA |= (1 << 6);
  d8:	86 b1       	in	r24, 0x06	; 6
  da:	80 64       	ori	r24, 0x40	; 64
  dc:	86 b9       	out	0x06, r24	; 6
	while ( ADCSRA & (1 << 6) );
  de:	36 99       	sbic	0x06, 6	; 6
  e0:	fe cf       	rjmp	.-4      	; 0xde <readADC+0x6>
	return ADCH;
  e2:	85 b1       	in	r24, 0x05	; 5
}
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	08 95       	ret

000000e8 <wait>:

void wait(int ms)
{
	for (int i=0; i<ms; i++)
  e8:	20 e0       	ldi	r18, 0x00	; 0
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	08 c0       	rjmp	.+16     	; 0xfe <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ee:	ef e9       	ldi	r30, 0x9F	; 159
  f0:	ff e0       	ldi	r31, 0x0F	; 15
  f2:	31 97       	sbiw	r30, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <wait+0xa>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <wait+0x10>
  f8:	00 00       	nop
  fa:	2f 5f       	subi	r18, 0xFF	; 255
  fc:	3f 4f       	sbci	r19, 0xFF	; 255
  fe:	28 17       	cp	r18, r24
 100:	39 07       	cpc	r19, r25
 102:	ac f3       	brlt	.-22     	; 0xee <wait+0x6>
	_delay_ms(1);
}
 104:	08 95       	ret

00000106 <changeWaveform>:

void changeWaveform(){
	wavenum++;
 106:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <wavenum>
 10a:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <wavenum+0x1>
 10e:	01 96       	adiw	r24, 0x01	; 1
	wavenum = wavenum > NUM_WAVEFORMS - 1? 0 : wavenum;
 110:	86 30       	cpi	r24, 0x06	; 6
 112:	91 05       	cpc	r25, r1
 114:	14 f0       	brlt	.+4      	; 0x11a <changeWaveform+0x14>
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	90 e0       	ldi	r25, 0x00	; 0
	wavenum = wavenum < 0? NUM_WAVEFORMS - 1 : wavenum;
 11a:	99 23       	and	r25, r25
 11c:	14 f4       	brge	.+4      	; 0x122 <changeWaveform+0x1c>
 11e:	85 e0       	ldi	r24, 0x05	; 5
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <wavenum+0x1>
 126:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <wavenum>
	waveform = waveforms[wavenum];
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	fc 01       	movw	r30, r24
 130:	ec 5f       	subi	r30, 0xFC	; 252
 132:	fe 4f       	sbci	r31, 0xFE	; 254
 134:	80 81       	ld	r24, Z
 136:	91 81       	ldd	r25, Z+1	; 0x01
 138:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <waveform+0x1>
 13c:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <waveform>
 140:	08 95       	ret

00000142 <noise>:

// faster noise generator than rand()
uint16_t noise()
{
	static uint16_t lfsr = 0xACE1u;
	lfsr = (lfsr >> 1) ^ (-(lfsr & 1u) & 0xB400u);
 142:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 146:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 14a:	c9 01       	movw	r24, r18
 14c:	96 95       	lsr	r25
 14e:	87 95       	ror	r24
 150:	21 70       	andi	r18, 0x01	; 1
 152:	33 27       	eor	r19, r19
 154:	31 95       	neg	r19
 156:	21 95       	neg	r18
 158:	31 09       	sbc	r19, r1
 15a:	22 27       	eor	r18, r18
 15c:	34 7b       	andi	r19, 0xB4	; 180
 15e:	82 27       	eor	r24, r18
 160:	93 27       	eor	r25, r19
 162:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 166:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	return lfsr;
}
 16a:	08 95       	ret

0000016c <__vector_12>:

ISR(TIMER1_COMPA_vect)
{
 16c:	1f 92       	push	r1
 16e:	0f 92       	push	r0
 170:	0f b6       	in	r0, 0x3f	; 63
 172:	0f 92       	push	r0
 174:	11 24       	eor	r1, r1
 176:	0b b6       	in	r0, 0x3b	; 59
 178:	0f 92       	push	r0
 17a:	2f 93       	push	r18
 17c:	3f 93       	push	r19
 17e:	4f 93       	push	r20
 180:	5f 93       	push	r21
 182:	6f 93       	push	r22
 184:	7f 93       	push	r23
 186:	8f 93       	push	r24
 188:	9f 93       	push	r25
 18a:	af 93       	push	r26
 18c:	bf 93       	push	r27
 18e:	ef 93       	push	r30
 190:	ff 93       	push	r31
	uint8_t shiftout;
	
	if(wavenum != NUM_WAVEFORMS - 2){
 192:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <wavenum>
 196:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <wavenum+0x1>
 19a:	04 97       	sbiw	r24, 0x04	; 4
 19c:	69 f0       	breq	.+26     	; 0x1b8 <__vector_12+0x4c>
		// take first bit
		shiftout = waveform & (1<<0);
 19e:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <waveform>
 1a2:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <waveform+0x1>
 1a6:	82 2f       	mov	r24, r18
 1a8:	81 70       	andi	r24, 0x01	; 1
		// move waveform 1 place to the right
		waveform >>= 1;
 1aa:	35 95       	asr	r19
 1ac:	27 95       	ror	r18
 1ae:	30 93 17 01 	sts	0x0117, r19	; 0x800117 <waveform+0x1>
 1b2:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <waveform>
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <__vector_12+0x50>
	} else {
		shiftout = noise() & 1;
 1b8:	c4 df       	rcall	.-120    	; 0x142 <noise>
 1ba:	81 70       	andi	r24, 0x01	; 1
	}
	
	// if we removed a 1 with the bit shift put a 1 to the end of the waveform
	// else do nothing and let it stay 0
	waveform &= ~(1 << 15);
 1bc:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <waveform>
 1c0:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <waveform+0x1>
 1c4:	3f 77       	andi	r19, 0x7F	; 127
 1c6:	30 93 17 01 	sts	0x0117, r19	; 0x800117 <waveform+0x1>
 1ca:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <waveform>
	if(shiftout)
 1ce:	88 23       	and	r24, r24
 1d0:	29 f0       	breq	.+10     	; 0x1dc <__vector_12+0x70>
		waveform |= (1 << 15);
 1d2:	30 68       	ori	r19, 0x80	; 128
 1d4:	30 93 17 01 	sts	0x0117, r19	; 0x800117 <waveform+0x1>
 1d8:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <waveform>

	PORTA = waveform;
 1dc:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <waveform>
 1e0:	9b bb       	out	0x1b, r25	; 27
	PORTB = waveform >> 8;
 1e2:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <waveform+0x1>
 1e6:	98 bb       	out	0x18, r25	; 24
	
	//shiftout &= envval;
	
	if(shiftout)
 1e8:	88 23       	and	r24, r24
 1ea:	19 f0       	breq	.+6      	; 0x1f2 <__vector_12+0x86>
		DDRF = 0x0;
 1ec:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 1f0:	03 c0       	rjmp	.+6      	; 0x1f8 <__vector_12+0x8c>
		//PORTE |= (1 << 2);
	else
		DDRF = 0x1;
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
		//PORTE &= ~(1 << 2);
	
}
 1f8:	ff 91       	pop	r31
 1fa:	ef 91       	pop	r30
 1fc:	bf 91       	pop	r27
 1fe:	af 91       	pop	r26
 200:	9f 91       	pop	r25
 202:	8f 91       	pop	r24
 204:	7f 91       	pop	r23
 206:	6f 91       	pop	r22
 208:	5f 91       	pop	r21
 20a:	4f 91       	pop	r20
 20c:	3f 91       	pop	r19
 20e:	2f 91       	pop	r18
 210:	0f 90       	pop	r0
 212:	0b be       	out	0x3b, r0	; 59
 214:	0f 90       	pop	r0
 216:	0f be       	out	0x3f, r0	; 63
 218:	0f 90       	pop	r0
 21a:	1f 90       	pop	r1
 21c:	18 95       	reti

0000021e <update_pitch>:

// set new pitch
void update_pitch()
{
	uint16_t newpitch = 200U + ((pitch-lfoval)*4U);
 21e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <pitch>
 222:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <pitch+0x1>
 226:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <__data_end>
 22a:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <__data_end+0x1>
 22e:	82 1b       	sub	r24, r18
 230:	93 0b       	sbc	r25, r19
 232:	c2 96       	adiw	r24, 0x32	; 50
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	88 0f       	add	r24, r24
 23a:	99 1f       	adc	r25, r25
	
	if (newpitch != outpitch)
 23c:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <outpitch>
 240:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <outpitch+0x1>
 244:	82 17       	cp	r24, r18
 246:	93 07       	cpc	r25, r19
 248:	89 f0       	breq	.+34     	; 0x26c <update_pitch+0x4e>
	{
		outpitch = newpitch;
 24a:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <outpitch+0x1>
 24e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <outpitch>
		if (TCNT1 > outpitch)
 252:	2c b5       	in	r18, 0x2c	; 44
 254:	3d b5       	in	r19, 0x2d	; 45
 256:	82 17       	cp	r24, r18
 258:	93 07       	cpc	r25, r19
 25a:	10 f4       	brcc	.+4      	; 0x260 <update_pitch+0x42>
		TCNT1 = 0;
 25c:	1d bc       	out	0x2d, r1	; 45
 25e:	1c bc       	out	0x2c, r1	; 44
		OCR1A = outpitch;
 260:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <outpitch>
 264:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <outpitch+0x1>
 268:	9b bd       	out	0x2b, r25	; 43
 26a:	8a bd       	out	0x2a, r24	; 42
 26c:	08 95       	ret

0000026e <setupTimer>:
	}
}

void setupTimer(){
	OCR1A = 500;
 26e:	84 ef       	ldi	r24, 0xF4	; 244
 270:	91 e0       	ldi	r25, 0x01	; 1
 272:	9b bd       	out	0x2b, r25	; 43
 274:	8a bd       	out	0x2a, r24	; 42
	TIMSK |= (1 << 4);
 276:	87 b7       	in	r24, 0x37	; 55
 278:	80 61       	ori	r24, 0x10	; 16
 27a:	87 bf       	out	0x37, r24	; 55
	sei();
 27c:	78 94       	sei
	TCCR1A = 0b0;
 27e:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0b1010;
 280:	8a e0       	ldi	r24, 0x0A	; 10
 282:	8e bd       	out	0x2e, r24	; 46
 284:	08 95       	ret

00000286 <main>:
}

int main()
{	
	DDRF = 0x01;
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	DDRA = 0xFF;
 28c:	8f ef       	ldi	r24, 0xFF	; 255
 28e:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
 290:	87 bb       	out	0x17, r24	; 23
	DDRD = 0x0;
 292:	11 ba       	out	0x11, r1	; 17
	DDRE = 0b01000110;
 294:	86 e4       	ldi	r24, 0x46	; 70
 296:	82 b9       	out	0x02, r24	; 2
	DDRG = 0x00;
 298:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	adcInit();
 29c:	15 df       	rcall	.-470    	; 0xc8 <adcInit>
	int pressed = 0;
	wavenum = 0;
 29e:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <wavenum+0x1>
 2a2:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <wavenum>
	waveform = waveforms[wavenum];
 2a6:	8a ea       	ldi	r24, 0xAA	; 170
 2a8:	9a ea       	ldi	r25, 0xAA	; 170
 2aa:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <waveform+0x1>
 2ae:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <waveform>
	
	setupTimer();
 2b2:	dd df       	rcall	.-70     	; 0x26e <setupTimer>
	DDRB = 0xFF;
	DDRD = 0x0;
	DDRE = 0b01000110;
	DDRG = 0x00;
	adcInit();
	int pressed = 0;
 2b4:	c0 e0       	ldi	r28, 0x00	; 0
 2b6:	d0 e0       	ldi	r29, 0x00	; 0
	setupTimer();
	
	while(1){
		//changeADCChannel(0);
		//PORTA = readADC();
		changeADCChannel(1);
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	90 e0       	ldi	r25, 0x00	; 0
		pitch = readADC();
 2bc:	0a df       	rcall	.-492    	; 0xd2 <changeADCChannel>
 2be:	0c df       	rcall	.-488    	; 0xd8 <readADC>
 2c0:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <pitch+0x1>
 2c4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <pitch>
		
		update_pitch();
		
		if(PINE & 0x80){
 2c8:	aa df       	rcall	.-172    	; 0x21e <update_pitch>
 2ca:	0f 9b       	sbis	0x01, 7	; 1
			if(pressed == 0){
 2cc:	06 c0       	rjmp	.+12     	; 0x2da <main+0x54>
 2ce:	20 97       	sbiw	r28, 0x00	; 0
				changeWaveform();
 2d0:	31 f4       	brne	.+12     	; 0x2de <main+0x58>
 2d2:	19 df       	rcall	.-462    	; 0x106 <changeWaveform>
				pressed = 1;
 2d4:	c1 e0       	ldi	r28, 0x01	; 1
 2d6:	d0 e0       	ldi	r29, 0x00	; 0
			}
		} else { 
			pressed = 0;
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <main+0x58>
 2da:	c0 e0       	ldi	r28, 0x00	; 0
		}
		
		wait(100);
 2dc:	d0 e0       	ldi	r29, 0x00	; 0
 2de:	84 e6       	ldi	r24, 0x64	; 100
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	02 df       	rcall	.-508    	; 0xe8 <wait>
	}
 2e4:	e9 cf       	rjmp	.-46     	; 0x2b8 <main+0x32>

000002e6 <_exit>:
 2e6:	f8 94       	cli

000002e8 <__stop_program>:
 2e8:	ff cf       	rjmp	.-2      	; 0x2e8 <__stop_program>

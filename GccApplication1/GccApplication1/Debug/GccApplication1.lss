
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000015e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000015e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000098b  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000878  00000000  00000000  00000b97  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000351  00000000  00000000  0000140f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001760  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000045b  00000000  00000000  000017c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  00001c1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001caf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	21 d0       	rcall	.+66     	; 0xdc <main>
  9a:	35 c0       	rjmp	.+106    	; 0x106 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <adcInit>:

#define F_CPU 8e6

void adcInit( void )
{
	ADMUX = 0b01100001;
  9e:	81 e6       	ldi	r24, 0x61	; 97
  a0:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0b10000110;
  a2:	86 e8       	ldi	r24, 0x86	; 134
  a4:	86 b9       	out	0x06, r24	; 6
  a6:	08 95       	ret

000000a8 <changeADCChannel>:
}

void changeADCChannel(int channel){
	ADMUX = 0x60 | channel;
  a8:	80 66       	ori	r24, 0x60	; 96
  aa:	87 b9       	out	0x07, r24	; 7
  ac:	08 95       	ret

000000ae <readADC>:
}

int readADC(){
	ADCSRA |= (1 << 6);
  ae:	86 b1       	in	r24, 0x06	; 6
  b0:	80 64       	ori	r24, 0x40	; 64
  b2:	86 b9       	out	0x06, r24	; 6
	while ( ADCSRA & (1 << 6) );
  b4:	36 99       	sbic	0x06, 6	; 6
  b6:	fe cf       	rjmp	.-4      	; 0xb4 <readADC+0x6>
	return ADCH;
  b8:	85 b1       	in	r24, 0x05	; 5
}
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	08 95       	ret

000000be <wait>:

void wait(int ms)
{
	for (int i=0; i<ms; i++)
  be:	20 e0       	ldi	r18, 0x00	; 0
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	08 c0       	rjmp	.+16     	; 0xd4 <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	ef ec       	ldi	r30, 0xCF	; 207
  c6:	f7 e0       	ldi	r31, 0x07	; 7
  c8:	31 97       	sbiw	r30, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <wait+0xa>
  cc:	00 c0       	rjmp	.+0      	; 0xce <wait+0x10>
  ce:	00 00       	nop
  d0:	2f 5f       	subi	r18, 0xFF	; 255
  d2:	3f 4f       	sbci	r19, 0xFF	; 255
  d4:	28 17       	cp	r18, r24
  d6:	39 07       	cpc	r19, r25
  d8:	ac f3       	brlt	.-22     	; 0xc4 <wait+0x6>
	_delay_ms(1);
}
  da:	08 95       	ret

000000dc <main>:

int main()
{	
	DDRF = 0x00;
  dc:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	DDRA = 0xFF;
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	8a bb       	out	0x1a, r24	; 26
	DDRD = 0xFF;
  e4:	81 bb       	out	0x11, r24	; 17
	DDRE = 0xFF;
  e6:	82 b9       	out	0x02, r24	; 2
	
	adcInit();
  e8:	da df       	rcall	.-76     	; 0x9e <adcInit>

	while(1){
		changeADCChannel(0);
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	90 e0       	ldi	r25, 0x00	; 0
		PORTD = readADC();
  ee:	dc df       	rcall	.-72     	; 0xa8 <changeADCChannel>
  f0:	de df       	rcall	.-68     	; 0xae <readADC>
		changeADCChannel(1);
  f2:	82 bb       	out	0x12, r24	; 18
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
		PORTE = readADC();
  f8:	d7 df       	rcall	.-82     	; 0xa8 <changeADCChannel>
  fa:	d9 df       	rcall	.-78     	; 0xae <readADC>
		wait(100);
  fc:	83 b9       	out	0x03, r24	; 3
  fe:	84 e6       	ldi	r24, 0x64	; 100
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	dd df       	rcall	.-70     	; 0xbe <wait>
 104:	f2 cf       	rjmp	.-28     	; 0xea <main+0xe>

00000106 <_exit>:
 106:	f8 94       	cli

00000108 <__stop_program>:
 108:	ff cf       	rjmp	.-2      	; 0x108 <__stop_program>

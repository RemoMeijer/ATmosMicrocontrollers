
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000204  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000288  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000aba  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008aa  00000000  00000000  00000dce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004f3  00000000  00000000  00001678  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  00001b6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000049c  00000000  00000000  00001c14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000435  00000000  00000000  000020b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  000024e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	54 c0       	rjmp	.+168    	; 0xaa <__ctors_end>
   2:	00 00       	nop
   4:	5a c0       	rjmp	.+180    	; 0xba <__bad_interrupt>
   6:	00 00       	nop
   8:	58 c0       	rjmp	.+176    	; 0xba <__bad_interrupt>
   a:	00 00       	nop
   c:	56 c0       	rjmp	.+172    	; 0xba <__bad_interrupt>
   e:	00 00       	nop
  10:	54 c0       	rjmp	.+168    	; 0xba <__bad_interrupt>
  12:	00 00       	nop
  14:	52 c0       	rjmp	.+164    	; 0xba <__bad_interrupt>
  16:	00 00       	nop
  18:	50 c0       	rjmp	.+160    	; 0xba <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4e c0       	rjmp	.+156    	; 0xba <__bad_interrupt>
  1e:	00 00       	nop
  20:	4c c0       	rjmp	.+152    	; 0xba <__bad_interrupt>
  22:	00 00       	nop
  24:	4a c0       	rjmp	.+148    	; 0xba <__bad_interrupt>
  26:	00 00       	nop
  28:	48 c0       	rjmp	.+144    	; 0xba <__bad_interrupt>
  2a:	00 00       	nop
  2c:	46 c0       	rjmp	.+140    	; 0xba <__bad_interrupt>
  2e:	00 00       	nop
  30:	44 c0       	rjmp	.+136    	; 0xba <__bad_interrupt>
  32:	00 00       	nop
  34:	42 c0       	rjmp	.+132    	; 0xba <__bad_interrupt>
  36:	00 00       	nop
  38:	40 c0       	rjmp	.+128    	; 0xba <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3e c0       	rjmp	.+124    	; 0xba <__bad_interrupt>
  3e:	00 00       	nop
  40:	3c c0       	rjmp	.+120    	; 0xba <__bad_interrupt>
  42:	00 00       	nop
  44:	3a c0       	rjmp	.+116    	; 0xba <__bad_interrupt>
  46:	00 00       	nop
  48:	38 c0       	rjmp	.+112    	; 0xba <__bad_interrupt>
  4a:	00 00       	nop
  4c:	36 c0       	rjmp	.+108    	; 0xba <__bad_interrupt>
  4e:	00 00       	nop
  50:	34 c0       	rjmp	.+104    	; 0xba <__bad_interrupt>
  52:	00 00       	nop
  54:	32 c0       	rjmp	.+100    	; 0xba <__bad_interrupt>
  56:	00 00       	nop
  58:	30 c0       	rjmp	.+96     	; 0xba <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2e c0       	rjmp	.+92     	; 0xba <__bad_interrupt>
  5e:	00 00       	nop
  60:	2c c0       	rjmp	.+88     	; 0xba <__bad_interrupt>
  62:	00 00       	nop
  64:	2a c0       	rjmp	.+84     	; 0xba <__bad_interrupt>
  66:	00 00       	nop
  68:	28 c0       	rjmp	.+80     	; 0xba <__bad_interrupt>
  6a:	00 00       	nop
  6c:	26 c0       	rjmp	.+76     	; 0xba <__bad_interrupt>
  6e:	00 00       	nop
  70:	24 c0       	rjmp	.+72     	; 0xba <__bad_interrupt>
  72:	00 00       	nop
  74:	22 c0       	rjmp	.+68     	; 0xba <__bad_interrupt>
  76:	00 00       	nop
  78:	20 c0       	rjmp	.+64     	; 0xba <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1e c0       	rjmp	.+60     	; 0xba <__bad_interrupt>
  7e:	00 00       	nop
  80:	1c c0       	rjmp	.+56     	; 0xba <__bad_interrupt>
  82:	00 00       	nop
  84:	1a c0       	rjmp	.+52     	; 0xba <__bad_interrupt>
  86:	00 00       	nop
  88:	18 c0       	rjmp	.+48     	; 0xba <__bad_interrupt>
  8a:	00 00       	nop
  8c:	d4 00       	.word	0x00d4	; ????
  8e:	b6 00       	.word	0x00b6	; ????
  90:	b8 00       	.word	0x00b8	; ????
  92:	ba 00       	.word	0x00ba	; ????
  94:	bc 00       	.word	0x00bc	; ????
  96:	be 00       	.word	0x00be	; ????
  98:	c0 00       	.word	0x00c0	; ????
  9a:	c2 00       	.word	0x00c2	; ????
  9c:	c4 00       	.word	0x00c4	; ????
  9e:	c6 00       	.word	0x00c6	; ????
  a0:	c8 00       	.word	0x00c8	; ????
  a2:	ca 00       	.word	0x00ca	; ????
  a4:	cc 00       	.word	0x00cc	; ????
  a6:	ce 00       	.word	0x00ce	; ????
  a8:	d0 00       	.word	0x00d0	; ????

000000aa <__ctors_end>:
  aa:	11 24       	eor	r1, r1
  ac:	1f be       	out	0x3f, r1	; 63
  ae:	cf ef       	ldi	r28, 0xFF	; 255
  b0:	d0 e1       	ldi	r29, 0x10	; 16
  b2:	de bf       	out	0x3e, r29	; 62
  b4:	cd bf       	out	0x3d, r28	; 61
  b6:	7a d0       	rcall	.+244    	; 0x1ac <main>
  b8:	a3 c0       	rjmp	.+326    	; 0x200 <_exit>

000000ba <__bad_interrupt>:
  ba:	a2 cf       	rjmp	.-188    	; 0x0 <__vectors>

000000bc <lcd_strobe_lcd_e>:

void lcd_write_string(char *str) {
	for(;*str; str++){
		lcd_write_data(*str);
	}
}
  bc:	85 b3       	in	r24, 0x15	; 21
  be:	88 60       	ori	r24, 0x08	; 8
  c0:	85 bb       	out	0x15, r24	; 21
  c2:	8f ec       	ldi	r24, 0xCF	; 207
  c4:	97 e0       	ldi	r25, 0x07	; 7
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <lcd_strobe_lcd_e+0xa>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <lcd_strobe_lcd_e+0x10>
  cc:	00 00       	nop
  ce:	85 b3       	in	r24, 0x15	; 21
  d0:	87 7f       	andi	r24, 0xF7	; 247
  d2:	85 bb       	out	0x15, r24	; 21
  d4:	8f ec       	ldi	r24, 0xCF	; 207
  d6:	97 e0       	ldi	r25, 0x07	; 7
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <lcd_strobe_lcd_e+0x1c>
  dc:	00 c0       	rjmp	.+0      	; 0xde <lcd_strobe_lcd_e+0x22>
  de:	00 00       	nop
  e0:	08 95       	ret

000000e2 <init_4bits_mode>:
  e2:	cf 93       	push	r28
  e4:	8f ef       	ldi	r24, 0xFF	; 255
  e6:	84 bb       	out	0x14, r24	; 20
  e8:	15 ba       	out	0x15, r1	; 21
  ea:	c0 e2       	ldi	r28, 0x20	; 32
  ec:	c5 bb       	out	0x15, r28	; 21
  ee:	e6 df       	rcall	.-52     	; 0xbc <lcd_strobe_lcd_e>
  f0:	c5 bb       	out	0x15, r28	; 21
  f2:	e4 df       	rcall	.-56     	; 0xbc <lcd_strobe_lcd_e>
  f4:	80 e8       	ldi	r24, 0x80	; 128
  f6:	85 bb       	out	0x15, r24	; 21
  f8:	e1 df       	rcall	.-62     	; 0xbc <lcd_strobe_lcd_e>
  fa:	15 ba       	out	0x15, r1	; 21
  fc:	df df       	rcall	.-66     	; 0xbc <lcd_strobe_lcd_e>
  fe:	80 ef       	ldi	r24, 0xF0	; 240
 100:	85 bb       	out	0x15, r24	; 21
 102:	dc df       	rcall	.-72     	; 0xbc <lcd_strobe_lcd_e>
 104:	15 ba       	out	0x15, r1	; 21
 106:	da df       	rcall	.-76     	; 0xbc <lcd_strobe_lcd_e>
 108:	80 e6       	ldi	r24, 0x60	; 96
 10a:	85 bb       	out	0x15, r24	; 21
 10c:	d7 df       	rcall	.-82     	; 0xbc <lcd_strobe_lcd_e>
 10e:	cf 91       	pop	r28
 110:	08 95       	ret

00000112 <lcd_write_data>:
 112:	cf 93       	push	r28
 114:	c8 2f       	mov	r28, r24
 116:	85 bb       	out	0x15, r24	; 21
 118:	85 b3       	in	r24, 0x15	; 21
 11a:	84 60       	ori	r24, 0x04	; 4
 11c:	85 bb       	out	0x15, r24	; 21
 11e:	ce df       	rcall	.-100    	; 0xbc <lcd_strobe_lcd_e>
 120:	c2 95       	swap	r28
 122:	c0 7f       	andi	r28, 0xF0	; 240
 124:	c5 bb       	out	0x15, r28	; 21
 126:	85 b3       	in	r24, 0x15	; 21
 128:	84 60       	ori	r24, 0x04	; 4
 12a:	85 bb       	out	0x15, r24	; 21
 12c:	c7 df       	rcall	.-114    	; 0xbc <lcd_strobe_lcd_e>
 12e:	cf 91       	pop	r28
 130:	08 95       	ret

00000132 <lcd_write_command>:
	PORTC |= (1<<LCD_RS);
	lcd_strobe_lcd_e();
}

void lcd_write_command(unsigned char byte)
{
 132:	cf 93       	push	r28
 134:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 136:	85 bb       	out	0x15, r24	; 21
	PORTC &= ~(1<<LCD_RS);
 138:	85 b3       	in	r24, 0x15	; 21
 13a:	8b 7f       	andi	r24, 0xFB	; 251
 13c:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 13e:	be df       	rcall	.-132    	; 0xbc <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 140:	c2 95       	swap	r28
 142:	c0 7f       	andi	r28, 0xF0	; 240
 144:	c5 bb       	out	0x15, r28	; 21
	PORTC &= ~(1<<LCD_RS);
 146:	85 b3       	in	r24, 0x15	; 21
 148:	8b 7f       	andi	r24, 0xFB	; 251
	lcd_strobe_lcd_e();
 14a:	85 bb       	out	0x15, r24	; 21
 14c:	b7 df       	rcall	.-146    	; 0xbc <lcd_strobe_lcd_e>
}
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <bin_to_char>:

char bin_to_char(unsigned char bin){
	char returnChar = '0';
	if(bin < 0b00010000){
 152:	80 31       	cpi	r24, 0x10	; 16
 154:	38 f5       	brcc	.+78     	; 0x1a4 <bin_to_char+0x52>
		switch(bin){
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	fc 01       	movw	r30, r24
 15a:	31 97       	sbiw	r30, 0x01	; 1
 15c:	ef 30       	cpi	r30, 0x0F	; 15
 15e:	f1 05       	cpc	r31, r1
 160:	18 f4       	brcc	.+6      	; 0x168 <bin_to_char+0x16>
 162:	ea 5b       	subi	r30, 0xBA	; 186
 164:	ff 4f       	sbci	r31, 0xFF	; 255
 166:	43 c0       	rjmp	.+134    	; 0x1ee <__tablejump2__>
	PORTC &= ~(1<<LCD_RS);
	lcd_strobe_lcd_e();
}

char bin_to_char(unsigned char bin){
	char returnChar = '0';
 168:	80 e3       	ldi	r24, 0x30	; 48
 16a:	08 95       	ret
		switch(bin){
			case 0b00000001 :
			returnChar = '1';
			break;
			case 0b00000010 :
			returnChar = '2';
 16c:	82 e3       	ldi	r24, 0x32	; 50
			break;
 16e:	08 95       	ret
			case 0b00000011 :
			returnChar = '3';
 170:	83 e3       	ldi	r24, 0x33	; 51
			break;
 172:	08 95       	ret
			case 0b00000100 :
			returnChar = '4';
 174:	84 e3       	ldi	r24, 0x34	; 52
			break;
 176:	08 95       	ret
			case 0b00000101 :
			returnChar = '5';
 178:	85 e3       	ldi	r24, 0x35	; 53
			break;
 17a:	08 95       	ret
			case 0b00000110 :
			returnChar = '6';
 17c:	86 e3       	ldi	r24, 0x36	; 54
			break;
 17e:	08 95       	ret
			case 0b00000111 :
			returnChar = '7';
 180:	87 e3       	ldi	r24, 0x37	; 55
			break;
 182:	08 95       	ret
			case 0b00001000:
			returnChar = '8';
 184:	88 e3       	ldi	r24, 0x38	; 56
			break;
 186:	08 95       	ret
			case 0b00001001:
			returnChar = '9';
 188:	89 e3       	ldi	r24, 0x39	; 57
			break;
 18a:	08 95       	ret
			case 0b00001010:
			returnChar = 'A';
 18c:	81 e4       	ldi	r24, 0x41	; 65
			break;
 18e:	08 95       	ret
			case 0b00001011:
			returnChar = 'B';
 190:	82 e4       	ldi	r24, 0x42	; 66
			break;
 192:	08 95       	ret
			case 0b00001100:
			returnChar = 'C';
 194:	83 e4       	ldi	r24, 0x43	; 67
			break;
 196:	08 95       	ret
			case 0b00001101:
			returnChar = 'D';
 198:	84 e4       	ldi	r24, 0x44	; 68
			break;
 19a:	08 95       	ret
			case 0b00001110:
			returnChar = 'E';
 19c:	85 e4       	ldi	r24, 0x45	; 69
			break;
 19e:	08 95       	ret
			case 0b00001111:
			returnChar = 'F';
 1a0:	86 e4       	ldi	r24, 0x46	; 70
			break;
 1a2:	08 95       	ret
	PORTC &= ~(1<<LCD_RS);
	lcd_strobe_lcd_e();
}

char bin_to_char(unsigned char bin){
	char returnChar = '0';
 1a4:	80 e3       	ldi	r24, 0x30	; 48
 1a6:	08 95       	ret
	if(bin < 0b00010000){
		switch(bin){
			case 0b00000001 :
			returnChar = '1';
 1a8:	81 e3       	ldi	r24, 0x31	; 49
			returnChar = 'F';
			break;
		}
	}
	return returnChar;	
}
 1aa:	08 95       	ret

000001ac <main>:

int main( void ) {
	
	DDRD &= ~(1 << 7);
 1ac:	81 b3       	in	r24, 0x11	; 17
 1ae:	8f 77       	andi	r24, 0x7F	; 127
 1b0:	81 bb       	out	0x11, r24	; 17
	DDRB = 0xFF;
 1b2:	8f ef       	ldi	r24, 0xFF	; 255
 1b4:	87 bb       	out	0x17, r24	; 23
	TCCR2 = 0b00000111;
 1b6:	87 e0       	ldi	r24, 0x07	; 7
 1b8:	85 bd       	out	0x25, r24	; 37

	// Init LCD
	init_4bits_mode();
 1ba:	93 df       	rcall	.-218    	; 0xe2 <init_4bits_mode>
	
	lcd_write_command(0x01);
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	b9 df       	rcall	.-142    	; 0x132 <lcd_write_command>
	
	// Loop forever
	while (1) {	
		lcd_write_command(0x01);
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	b7 df       	rcall	.-146    	; 0x132 <lcd_write_command>
 1c4:	84 b5       	in	r24, 0x24	; 36

		
		lcd_write_data(bin_to_char(TCNT2 >> 4));
 1c6:	82 95       	swap	r24
 1c8:	8f 70       	andi	r24, 0x0F	; 15
 1ca:	c3 df       	rcall	.-122    	; 0x152 <bin_to_char>
 1cc:	a2 df       	rcall	.-188    	; 0x112 <lcd_write_data>
		lcd_write_data(bin_to_char(TCNT2 & 0b1111));
 1ce:	84 b5       	in	r24, 0x24	; 36
 1d0:	8f 70       	andi	r24, 0x0F	; 15
 1d2:	bf df       	rcall	.-130    	; 0x152 <bin_to_char>
 1d4:	9e df       	rcall	.-196    	; 0x112 <lcd_write_data>
 1d6:	84 b5       	in	r24, 0x24	; 36
 1d8:	88 bb       	out	0x18, r24	; 24

		PORTB = TCNT2;
 1da:	2f e7       	ldi	r18, 0x7F	; 127
 1dc:	8a e1       	ldi	r24, 0x1A	; 26
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1de:	96 e0       	ldi	r25, 0x06	; 6
 1e0:	21 50       	subi	r18, 0x01	; 1
 1e2:	80 40       	sbci	r24, 0x00	; 0
 1e4:	90 40       	sbci	r25, 0x00	; 0
 1e6:	e1 f7       	brne	.-8      	; 0x1e0 <main+0x34>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <main+0x3e>
 1ea:	00 00       	nop
 1ec:	e9 cf       	rjmp	.-46     	; 0x1c0 <main+0x14>

000001ee <__tablejump2__>:
 1ee:	ee 0f       	add	r30, r30
 1f0:	ff 1f       	adc	r31, r31
 1f2:	00 24       	eor	r0, r0
 1f4:	00 1c       	adc	r0, r0
 1f6:	0b be       	out	0x3b, r0	; 59
 1f8:	07 90       	elpm	r0, Z+
 1fa:	f6 91       	elpm	r31, Z
 1fc:	e0 2d       	mov	r30, r0
 1fe:	09 94       	ijmp

00000200 <_exit>:
 200:	f8 94       	cli

00000202 <__stop_program>:
 202:	ff cf       	rjmp	.-2      	; 0x202 <__stop_program>
